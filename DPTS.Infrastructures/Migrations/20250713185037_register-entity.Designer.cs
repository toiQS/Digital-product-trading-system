// <auto-generated />
using System;
using DPTS.Infrastructures.Datas;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DPTS.Infrastructures.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250713185037_register-entity")]
    partial class registerentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DPTS.Domains.AdjustmentRule", b =>
                {
                    b.Property<string>("RuleId")
                        .HasColumnType("text")
                        .HasColumnName("rule_id");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text");

                    b.Property<string>("ConditionsJson")
                        .HasColumnType("text")
                        .HasColumnName("conditions_json");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("From")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_from");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("boolean")
                        .HasColumnName("is_percentage");

                    b.Property<decimal?>("MaxCap")
                        .HasColumnType("numeric")
                        .HasColumnName("max_cap");

                    b.Property<decimal?>("MinOrderAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("min_order_amount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("PerUserLimit")
                        .HasColumnType("integer")
                        .HasColumnName("per_user_limit");

                    b.Property<int>("Scope")
                        .HasColumnType("integer")
                        .HasColumnName("scope");

                    b.Property<int>("Source")
                        .HasColumnType("integer")
                        .HasColumnName("source");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TargetLogic")
                        .HasColumnType("integer")
                        .HasColumnName("target_logic");

                    b.Property<DateTime?>("To")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_to");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<int?>("UsageLimit")
                        .HasColumnType("integer")
                        .HasColumnName("usage_limit");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.Property<string>("VoucherCode")
                        .HasColumnType("text")
                        .HasColumnName("voucher_code");

                    b.HasKey("RuleId");

                    b.HasIndex("CategoryId");

                    b.ToTable("adjustment_rule");
                });

            modelBuilder.Entity("DPTS.Domains.Cart", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("text")
                        .HasColumnName("cart_id");

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("buyer_id");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("cart");
                });

            modelBuilder.Entity("DPTS.Domains.CartItem", b =>
                {
                    b.Property<string>("CartItemId")
                        .HasColumnType("text")
                        .HasColumnName("cart_item_id");

                    b.Property<string>("CartId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cart_id");

                    b.Property<decimal>("PriceForEachProduct")
                        .HasColumnType("numeric")
                        .HasColumnName("price_foreach_product");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("cart_item");
                });

            modelBuilder.Entity("DPTS.Domains.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<string>("CategoryIcon")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_icon");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_name");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean")
                        .HasColumnName("is_featured");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("CategoryId");

                    b.ToTable("category");
                });

            modelBuilder.Entity("DPTS.Domains.Complaint", b =>
                {
                    b.Property<string>("ComplaintId")
                        .HasColumnType("text")
                        .HasColumnName("complaint_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_item_id");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_id");

                    b.Property<string>("OrderItemId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("ComplaintId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("UserId");

                    b.ToTable("complaint");
                });

            modelBuilder.Entity("DPTS.Domains.ComplaintImage", b =>
                {
                    b.Property<string>("ImageId")
                        .HasColumnType("text")
                        .HasColumnName("image_id");

                    b.Property<string>("ComplaintId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("complaint_id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.HasKey("ImageId");

                    b.HasIndex("ComplaintId");

                    b.ToTable("complaint_image");
                });

            modelBuilder.Entity("DPTS.Domains.Escrow", b =>
                {
                    b.Property<string>("EscrowId")
                        .HasColumnType("text")
                        .HasColumnName("escrow_id");

                    b.Property<decimal>("ActualAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("actual_amount");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("Expired")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_id");

                    b.Property<decimal>("PlatformFeeAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("platform_fee_amount");

                    b.Property<decimal>("PlatformFeeRate")
                        .HasColumnType("numeric")
                        .HasColumnName("platform_fee_rate");

                    b.Property<DateTime?>("ReleasedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("released_at");

                    b.Property<string>("ReleasedBy")
                        .HasColumnType("text")
                        .HasColumnName("released_by");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("store_id");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("tax_amount");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("numeric")
                        .HasColumnName("tax_rate");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("EscrowId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.ToTable("escrow");
                });

            modelBuilder.Entity("DPTS.Domains.LogAction", b =>
                {
                    b.Property<string>("LogActionId")
                        .HasColumnType("text")
                        .HasColumnName("log_action_id");

                    b.Property<string>("ActionDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action_description");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("TargetId")
                        .HasColumnType("text")
                        .HasColumnName("target_id");

                    b.Property<string>("TargetType")
                        .HasColumnType("text")
                        .HasColumnName("target_type");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LogActionId");

                    b.HasIndex("UserId");

                    b.ToTable("log_action");
                });

            modelBuilder.Entity("DPTS.Domains.Message", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("text")
                        .HasColumnName("message_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("receiver_id");

                    b.Property<int>("ReceiverType")
                        .HasColumnType("integer")
                        .HasColumnName("receiver_type");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sender_id");

                    b.Property<int>("SenderType")
                        .HasColumnType("integer")
                        .HasColumnName("sender_type");

                    b.Property<string>("StoreId")
                        .HasColumnType("text");

                    b.Property<string>("StoreId1")
                        .HasColumnType("text");

                    b.HasKey("MessageId");

                    b.HasIndex("StoreId");

                    b.HasIndex("StoreId1");

                    b.ToTable("message");
                });

            modelBuilder.Entity("DPTS.Domains.Notification", b =>
                {
                    b.Property<string>("NotificationId")
                        .HasColumnType("text")
                        .HasColumnName("notification_id");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("context");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("receiver_id");

                    b.Property<int>("ReceiverType")
                        .HasColumnType("integer")
                        .HasColumnName("receiver_type");

                    b.HasKey("NotificationId");

                    b.ToTable("notification");
                });

            modelBuilder.Entity("DPTS.Domains.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("text")
                        .HasColumnName("order_id");

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("buyer_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paid");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("OrderId");

                    b.HasIndex("BuyerId");

                    b.ToTable("order");
                });

            modelBuilder.Entity("DPTS.Domains.OrderItem", b =>
                {
                    b.Property<string>("OrderItemId")
                        .HasColumnType("text")
                        .HasColumnName("order_item_id");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_id");

                    b.Property<decimal>("PriceForEachProduct")
                        .HasColumnType("numeric")
                        .HasColumnName("price_for_each_product");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("total_price");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_item");
                });

            modelBuilder.Entity("DPTS.Domains.OrderPaymentMethod", b =>
                {
                    b.Property<string>("OrderPaymentId")
                        .HasColumnType("text")
                        .HasColumnName("order_payment_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paid_at");

                    b.Property<string>("PaymentMethodId")
                        .HasColumnType("text")
                        .HasColumnName("payment_method_id");

                    b.Property<int>("SourceType")
                        .HasColumnType("integer")
                        .HasColumnName("source_type");

                    b.Property<string>("WalletId")
                        .HasColumnType("text")
                        .HasColumnName("wallet_id");

                    b.HasKey("OrderPaymentId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("WalletId");

                    b.ToTable("order_payment_method");
                });

            modelBuilder.Entity("DPTS.Domains.OrderProcess", b =>
                {
                    b.Property<string>("ProcessId")
                        .HasColumnType("text")
                        .HasColumnName("process_id");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_id");

                    b.Property<string>("OrderProcessInformation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_process_information");

                    b.Property<DateTime>("ProcessAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("process_at");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("process_name");

                    b.HasKey("ProcessId");

                    b.HasIndex("OrderId");

                    b.ToTable("order_process");
                });

            modelBuilder.Entity("DPTS.Domains.PaymentMethod", b =>
                {
                    b.Property<string>("PaymentMethodId")
                        .HasColumnType("text")
                        .HasColumnName("payment_method_id");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_verified");

                    b.Property<string>("MaskedAccountNumber")
                        .HasColumnType("text")
                        .HasColumnName("masked_account_number");

                    b.Property<int>("Provider")
                        .HasColumnType("integer")
                        .HasColumnName("provider");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("payment_method");
                });

            modelBuilder.Entity("DPTS.Domains.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("text")
                        .HasColumnName("product_id");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("original_price");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("store_id");

                    b.Property<string>("SummaryFeature")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("summary_feature");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("DPTS.Domains.ProductAdjustment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("product_adjustment_id");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_id");

                    b.Property<string>("RuleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rule_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RuleId");

                    b.ToTable("product_adjustment");
                });

            modelBuilder.Entity("DPTS.Domains.ProductImage", b =>
                {
                    b.Property<string>("ImageId")
                        .HasColumnType("text")
                        .HasColumnName("image_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_id");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_image");
                });

            modelBuilder.Entity("DPTS.Domains.ProductReview", b =>
                {
                    b.Property<string>("ReviewId")
                        .HasColumnType("text")
                        .HasColumnName("review_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Likes")
                        .HasColumnType("integer")
                        .HasColumnName("likes");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_id");

                    b.Property<double>("RatingOverall")
                        .HasColumnType("double precision")
                        .HasColumnName("rating_overall");

                    b.Property<int>("RatingQuality")
                        .HasColumnType("integer")
                        .HasColumnName("rating_quality");

                    b.Property<int>("RatingUsability")
                        .HasColumnType("integer")
                        .HasColumnName("rating_usability");

                    b.Property<int>("RatingValue")
                        .HasColumnType("integer")
                        .HasColumnName("rating_value");

                    b.Property<bool>("RecommendToOthers")
                        .HasColumnType("boolean")
                        .HasColumnName("recommend_to_others");

                    b.Property<string>("ReviewTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("review_title");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("ReviewId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("product_review");
                });

            modelBuilder.Entity("DPTS.Domains.ProductReviewImage", b =>
                {
                    b.Property<string>("ProductReviewImageId")
                        .HasColumnType("text")
                        .HasColumnName("product_review_image_id");

                    b.Property<string>("ProductReviewId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_review_id");

                    b.Property<string>("ProductReviewImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_review_image_path");

                    b.HasKey("ProductReviewImageId");

                    b.HasIndex("ProductReviewId");

                    b.ToTable("product_review_image");
                });

            modelBuilder.Entity("DPTS.Domains.Store", b =>
                {
                    b.Property<string>("StoreId")
                        .HasColumnType("text")
                        .HasColumnName("store_id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("StoreImage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("store_image");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("store_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("StoreId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("store");
                });

            modelBuilder.Entity("DPTS.Domains.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("DPTS.Domains.UserProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("UserId");

                    b.ToTable("user_profile");
                });

            modelBuilder.Entity("DPTS.Domains.UserRole", b =>
                {
                    b.Property<string>("UserRoleId")
                        .HasColumnType("text")
                        .HasColumnName("user_role_id");

                    b.Property<string>("UserRoleDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_role_description");

                    b.Property<string>("UserRoleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_role_name");

                    b.HasKey("UserRoleId");

                    b.ToTable("user_role");
                });

            modelBuilder.Entity("DPTS.Domains.UserSecurity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("email_verified");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("failed_login_attempts");

                    b.Property<DateTime?>("LockoutUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_until");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("TwoFactorSecret")
                        .HasColumnType("text")
                        .HasColumnName("two_factor_secret");

                    b.HasKey("UserId");

                    b.ToTable("user_security");
                });

            modelBuilder.Entity("DPTS.Domains.Wallet", b =>
                {
                    b.Property<string>("WalletId")
                        .HasColumnType("text")
                        .HasColumnName("wallet_id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("wallet");
                });

            modelBuilder.Entity("DPTS.Domains.WalletTransaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("text")
                        .HasColumnName("wallet_transaction_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("LinkedPaymentMethodPaymentMethodId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("WalletId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("wallet_id");

                    b.HasKey("TransactionId");

                    b.HasIndex("LinkedPaymentMethodPaymentMethodId");

                    b.HasIndex("WalletId");

                    b.ToTable("wallet_transaction");
                });

            modelBuilder.Entity("DPTS.Domains.AdjustmentRule", b =>
                {
                    b.HasOne("DPTS.Domains.Category", null)
                        .WithMany("AdjustmentRules")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("DPTS.Domains.Cart", b =>
                {
                    b.HasOne("DPTS.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DPTS.Domains.CartItem", b =>
                {
                    b.HasOne("DPTS.Domains.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DPTS.Domains.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DPTS.Domains.Complaint", b =>
                {
                    b.HasOne("DPTS.Domains.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DPTS.Domains.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId");

                    b.HasOne("DPTS.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("OrderItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DPTS.Domains.ComplaintImage", b =>
                {
                    b.HasOne("DPTS.Domains.Complaint", "Complaint")
                        .WithMany("Images")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complaint");
                });

            modelBuilder.Entity("DPTS.Domains.Escrow", b =>
                {
                    b.HasOne("DPTS.Domains.Order", "Order")
                        .WithOne("Escrow")
                        .HasForeignKey("DPTS.Domains.Escrow", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DPTS.Domains.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("DPTS.Domains.LogAction", b =>
                {
                    b.HasOne("DPTS.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DPTS.Domains.Message", b =>
                {
                    b.HasOne("DPTS.Domains.Store", null)
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("StoreId");

                    b.HasOne("DPTS.Domains.Store", null)
                        .WithMany("SentMessages")
                        .HasForeignKey("StoreId1");
                });

            modelBuilder.Entity("DPTS.Domains.Order", b =>
                {
                    b.HasOne("DPTS.Domains.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("DPTS.Domains.OrderItem", b =>
                {
                    b.HasOne("DPTS.Domains.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DPTS.Domains.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DPTS.Domains.OrderPaymentMethod", b =>
                {
                    b.HasOne("DPTS.Domains.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DPTS.Domains.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("DPTS.Domains.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId");

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("DPTS.Domains.OrderProcess", b =>
                {
                    b.HasOne("DPTS.Domains.Order", "Order")
                        .WithMany("Processs")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DPTS.Domains.PaymentMethod", b =>
                {
                    b.HasOne("DPTS.Domains.User", null)
                        .WithMany("PaymentMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DPTS.Domains.Product", b =>
                {
                    b.HasOne("DPTS.Domains.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DPTS.Domains.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("DPTS.Domains.ProductAdjustment", b =>
                {
                    b.HasOne("DPTS.Domains.Product", "Product")
                        .WithMany("ProductAdjustments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DPTS.Domains.AdjustmentRule", "Rule")
                        .WithMany("ProductAdjustments")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("DPTS.Domains.ProductImage", b =>
                {
                    b.HasOne("DPTS.Domains.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DPTS.Domains.ProductReview", b =>
                {
                    b.HasOne("DPTS.Domains.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DPTS.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DPTS.Domains.ProductReviewImage", b =>
                {
                    b.HasOne("DPTS.Domains.ProductReview", "ProductReview")
                        .WithMany("ProductReviewImages")
                        .HasForeignKey("ProductReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductReview");
                });

            modelBuilder.Entity("DPTS.Domains.Store", b =>
                {
                    b.HasOne("DPTS.Domains.User", "User")
                        .WithOne("Store")
                        .HasForeignKey("DPTS.Domains.Store", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DPTS.Domains.User", b =>
                {
                    b.HasOne("DPTS.Domains.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("DPTS.Domains.UserProfile", b =>
                {
                    b.HasOne("DPTS.Domains.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("DPTS.Domains.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DPTS.Domains.Address", "Address", b1 =>
                        {
                            b1.Property<string>("UserProfileUserId")
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("country");

                            b1.Property<string>("District")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("district");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("postal_code");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("street");

                            b1.HasKey("UserProfileUserId");

                            b1.ToTable("user_profile");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileUserId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DPTS.Domains.UserSecurity", b =>
                {
                    b.HasOne("DPTS.Domains.User", "User")
                        .WithOne("Security")
                        .HasForeignKey("DPTS.Domains.UserSecurity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DPTS.Domains.Wallet", b =>
                {
                    b.HasOne("DPTS.Domains.User", null)
                        .WithOne("Wallet")
                        .HasForeignKey("DPTS.Domains.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DPTS.Domains.WalletTransaction", b =>
                {
                    b.HasOne("DPTS.Domains.PaymentMethod", "LinkedPaymentMethod")
                        .WithMany()
                        .HasForeignKey("LinkedPaymentMethodPaymentMethodId");

                    b.HasOne("DPTS.Domains.Wallet", null)
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkedPaymentMethod");
                });

            modelBuilder.Entity("DPTS.Domains.AdjustmentRule", b =>
                {
                    b.Navigation("ProductAdjustments");
                });

            modelBuilder.Entity("DPTS.Domains.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("DPTS.Domains.Category", b =>
                {
                    b.Navigation("AdjustmentRules");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("DPTS.Domains.Complaint", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("DPTS.Domains.Order", b =>
                {
                    b.Navigation("Escrow")
                        .IsRequired();

                    b.Navigation("OrderItems");

                    b.Navigation("Processs");
                });

            modelBuilder.Entity("DPTS.Domains.Product", b =>
                {
                    b.Navigation("ProductAdjustments");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductReviews");
                });

            modelBuilder.Entity("DPTS.Domains.ProductReview", b =>
                {
                    b.Navigation("ProductReviewImages");
                });

            modelBuilder.Entity("DPTS.Domains.Store", b =>
                {
                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });

            modelBuilder.Entity("DPTS.Domains.User", b =>
                {
                    b.Navigation("PaymentMethods");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Security")
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("DPTS.Domains.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
